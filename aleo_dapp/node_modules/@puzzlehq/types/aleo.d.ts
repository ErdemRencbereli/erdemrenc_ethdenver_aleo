import z from 'zod';
export declare const containsAleoAddressRegex: RegExp;
export declare const aleoAddressRegex: RegExp;
export declare const aleoViewKeyRegex: RegExp;
export declare const aleoPrivateKeyRegex: RegExp;
export declare const aleoTransitionIdRegex: RegExp;
export declare const aleoTransactionIdRegex: RegExp;
export declare const aleoFieldRegex: RegExp;
export declare const aleoU32: RegExp;
export declare const aleoU64: RegExp;
export declare const zodAddress: z.ZodString;
export declare const zodViewKey: z.ZodString;
export declare const zodPrivateKey: z.ZodString;
export declare const zodTransitionId: z.ZodString;
export declare const zodTransactionId: z.ZodString;
export declare const zodField: z.ZodString;
export declare const zodU32: z.ZodString;
export declare const zodU64: z.ZodString;
export type Block = {
  header: Header;
  transactions: TransactionWrapper[];
  aborted_transaction_ids: string[];
};
export type Header = {
  metadata: Metadata;
};
export type Metadata = {
  height: number;
  timestamp: number;
};
export type TransactionWrapper = {
  status: string;
  type: string;
  index: number;
  transaction: Transaction;
  finalize: any[];
};
export type Transaction = {
  type: string;
  id: string;
  execution?: Execution;
  deployment?: Deployment;
  owner?: Owner;
  fee?: Fee;
};
export type Execution = {
  transitions: Transition[];
  global_state_root: string;
  proof: string;
};
export type Deployment = {
  edition: number;
  program: string;
};
export type Owner = {
  address: string;
};
export type Fee = {
  transition: Transition;
  global_state_root: string;
  proof: string;
};
export type Transition = {
  id: string;
  program: string;
  function: string;
  inputs: Input[];
  outputs: Output[];
  finalize?: string[];
  tpk: string;
  tcm: string;
  scm: string;
};
export type Input = {
  type: InputOutputType;
  id: string;
  tag?: string;
  value?: string;
};
export type Output = {
  type: InputOutputType;
  id: string;
  value: string;
  checksum?: string;
};
export declare enum InputOutputType {
  Record = 'record',
  OutputRecord = 'outputRecord',
  Public = 'public',
  Private = 'private',
  Constant = 'constant',
  Future = 'future',
  ExternalRecord = 'external_record',
}
