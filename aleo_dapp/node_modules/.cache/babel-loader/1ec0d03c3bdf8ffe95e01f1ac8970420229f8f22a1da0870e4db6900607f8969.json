{"ast":null,"code":"import { z } from 'zod';\nexport var RecordStatus;\n(function (RecordStatus) {\n  RecordStatus['Unspent'] = 'Unspent';\n  RecordStatus['Pending'] = 'Pending';\n  RecordStatus['Spent'] = 'Spent';\n})(RecordStatus || (RecordStatus = {}));\nexport const getNestedProperty = (data, path) => {\n  let result = data;\n  for (const key of path) {\n    if (typeof result !== 'object' || result[key] === undefined) {\n      return undefined;\n    }\n    result = result[key];\n  }\n  return result;\n};\nexport const getNestedStringProperty = (data, path) => {\n  const result = getNestedProperty(data, path);\n  if (typeof result === 'string') {\n    return result;\n  }\n  return undefined;\n};\n/// enums\nexport var EventType;\n(function (EventType) {\n  EventType['Deploy'] = 'Deploy';\n  EventType['Execute'] = 'Execute';\n  EventType['Send'] = 'Send';\n  EventType['Receive'] = 'Receive';\n  EventType['Join'] = 'Join';\n  EventType['Split'] = 'Split';\n  EventType['Shield'] = 'Shield';\n  EventType['Unshield'] = 'Unshield';\n  EventType['Referral'] = 'Referral';\n  EventType['Points'] = 'Points';\n  /// arcade\n  EventType['Spin'] = 'Spin';\n  EventType['Raffle'] = 'Raffle';\n  EventType['Mint'] = 'Mint';\n  EventType['StoreStock'] = 'Store Stock';\n  EventType['StorePurchase'] = 'Store Purchase';\n  EventType['StoreFulfillment'] = 'Store Fulfillment';\n  EventType['GiveawayEntry'] = 'Giveaway Entry';\n  EventType['GiveawayWin'] = 'Giveaway Win';\n  EventType['SquashMint'] = 'Squash Mint';\n  EventType['SquashWater'] = 'Squash Water';\n  EventType['SquashLevelUp'] = 'Squash Level Up';\n  EventType['MysteryCity'] = 'Mystery City';\n})(EventType || (EventType = {}));\nexport var EventStatus;\n(function (EventStatus) {\n  EventStatus['Creating'] = 'Creating';\n  EventStatus['Pending'] = 'Pending';\n  EventStatus['Settled'] = 'Settled';\n  EventStatus['Failed'] = 'Failed';\n})(EventStatus || (EventStatus = {}));\nexport var Visibility;\n(function (Visibility) {\n  Visibility['Private'] = 'Private';\n  Visibility['Public'] = 'Public';\n})(Visibility || (Visibility = {}));\nexport var Network;\n(function (Network) {\n  Network['AleoTestnet'] = 'AleoTestnet';\n  Network['AleoMainnet'] = 'AleoMainnet';\n})(Network || (Network = {}));\n/// note: these are not necessarily correct yet (except for testnet3)\nexport const networkPath = network => {\n  switch (network) {\n    case Network.AleoTestnet:\n      return 'testnet';\n    case Network.AleoMainnet:\n      return 'mainnet';\n  }\n};\nexport const zodEventType = z.nativeEnum(EventType);\nexport const zodEventStatus = z.nativeEnum(EventStatus);\nexport const zodNetwork = z.nativeEnum(Network);\nexport const zodVisibility = z.nativeEnum(Visibility);\nexport const zodRecordStatus = z.nativeEnum(RecordStatus);\nexport * from './aleo.js';","map":{"version":3,"names":["z","RecordStatus","getNestedProperty","data","path","result","key","undefined","getNestedStringProperty","EventType","EventStatus","Visibility","Network","networkPath","network","AleoTestnet","AleoMainnet","zodEventType","nativeEnum","zodEventStatus","zodNetwork","zodVisibility","zodRecordStatus"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@puzzlehq/types/index.ts"],"sourcesContent":["import { z } from 'zod';\nimport { Transaction } from './aleo.js';\n\nexport type Account = {\n  _id: string;\n  address: string;\n  viewkey: string;\n  viewer: string;\n  created?: Date;\n  lastAccessed?: Date;\n  imported: boolean;\n  shared: boolean;\n  walletAddress?: string;\n  archivedHeight?: number;\n  archivedHeightTestnet?: number;\n};\n\nexport type EventTransition = {\n  transitionId: string;\n  programId: string;\n  functionId: string;\n  inputs: (string | null)[];\n  outputs: (string | null)[];\n};\n\ntype TransitionCreate = {\n  transitionId: string;\n  programId: string;\n  functionId: string;\n  inputs?: string[];\n  outputs?: string[];\n};\n\nexport type Asset = {\n  tokenId: string; // field\n  name: string;\n  symbol?: string;\n  programId: string;\n  decimals: number; // u8 in metadata\n  supply?: number; // u128 in metadata\n  max_supply?: number; // u128 in metadata\n  isARC20: boolean;\n  displayIfZero?: boolean;\n  recordName: string;\n};\n\nexport type AssetV2 = {\n  tokenId: string; // field\n  name: string;\n  symbol?: string;\n  decimals: number; // u8 in metadata\n  supply?: number; // u128 in metadata\n  maxSupply?: number; // u128 in metadata\n  admin?: string; // address in metadata\n  externalAuthorizationRequired?: boolean;\n  externalAuthorizationParty?: string; // address in metadata\n\n  isMTSP: boolean;\n\n  programId: string;\n  recordName: string; // Token if isMTSP === true\n\n  displayIfZero?: boolean;\n  iconURL?: string;\n  usageCount?: number;\n  priority: number;\n  coinbaseSymbol?: string;\n};\n\nexport type Event = {\n  _id: string;\n  type: EventType;\n  owner: string;\n\n  status: EventStatus;\n  created: Date;\n  broadcast?: Date;\n  broadcastHeight?: number;\n  settled?: Date;\n\n  network: Network;\n  transactionId?: string;\n  height?: number;\n  description?: string;\n  visibility: Visibility;\n\n  fee: number;\n  feeCovered?: boolean;\n  feeCoverageType?: CoverageType;\n  functionId?: string;\n  programId?: string;\n\n  inputs: string[];\n  transitions: EventTransition[];\n  feeTransition?: EventTransition;\n\n  error?: string;\n\n  tokenIds?: string[];\n\n  puzzlePoints?: number;\n  coins?: number;\n\n  // for re-broadcasting until Settled or Failed\n  // set on broadcast\n  // unset on Settled (patience settlements)\n  // unset on Failed (checkPendingTransactions.ts)\n  transaction?: Transaction;\n};\n\nexport type EventCreate = {\n  type: EventType;\n  owner: string;\n  description?: string;\n  network: Network;\n  functionId?: string;\n  programId?: string;\n  visibility?: Visibility;\n  inputs?: string[];\n  transitions?: TransitionCreate[];\n  tokenIds?: string[];\n};\n\nexport type Record = {\n  _id: string;\n  eventId?: string;\n  height: number;\n  timestamp: Date;\n  ciphertext: string;\n  programId: string;\n  functionId: string;\n  name: string;\n  network: Network;\n  transactionId: string;\n  transitionId: string;\n  /// output index\n  index: number;\n  status: RecordStatus;\n  owner?: string | null;\n  spentEventId?: string;\n  serialNumber?: string | null;\n};\n\nexport enum RecordStatus {\n  Unspent = 'Unspent',\n  Pending = 'Pending',\n  Spent = 'Spent',\n}\n\nexport type StringRecord = {\n  [key: string]: string | StringRecord;\n};\n\nexport const getNestedProperty = (\n  data: StringRecord,\n  path: string[]\n): string | StringRecord | undefined => {\n  let result: string | StringRecord = data;\n  for (const key of path) {\n    if (typeof result !== 'object' || result[key] === undefined) {\n      return undefined;\n    }\n    result = result[key];\n  }\n  return result;\n};\n\nexport const getNestedStringProperty = (\n  data: StringRecord,\n  path: string[]\n): string | undefined => {\n  const result = getNestedProperty(data, path);\n  if (typeof result === 'string') {\n    return result;\n  }\n  return undefined;\n};\n\nexport type RecordWithPlaintext = Record & {\n  plaintext: string;\n  microcredits: number;\n  data: StringRecord;\n};\n\nexport type BalanceValues = {\n  private: number;\n  public: number;\n};\n\nexport type Balance = AssetV2 & {\n  owner: string;\n  network: Network;\n  values: BalanceValues;\n};\n\n/// enums\n\nexport enum EventType {\n  Deploy = 'Deploy',\n  Execute = 'Execute',\n  Send = 'Send',\n  Receive = 'Receive',\n  Join = 'Join',\n  Split = 'Split',\n  Shield = 'Shield',\n  Unshield = 'Unshield',\n  Referral = 'Referral',\n  Points = 'Points',\n\n  /// arcade\n  Spin = 'Spin',\n  Raffle = 'Raffle',\n  Mint = 'Mint',\n  StoreStock = 'Store Stock',\n  StorePurchase = 'Store Purchase',\n  StoreFulfillment = 'Store Fulfillment',\n  GiveawayEntry = 'Giveaway Entry',\n  GiveawayWin = 'Giveaway Win',\n  SquashMint = 'Squash Mint',\n  SquashWater = 'Squash Water',\n  SquashLevelUp = 'Squash Level Up',\n  MysteryCity = 'Mystery City',\n}\n\nexport enum EventStatus {\n  Creating = 'Creating',\n  Pending = 'Pending',\n  Settled = 'Settled',\n  Failed = 'Failed',\n}\n\nexport enum Visibility {\n  Private = 'Private',\n  Public = 'Public',\n}\n\nexport enum Network {\n  AleoTestnet = 'AleoTestnet',\n  AleoMainnet = 'AleoMainnet',\n}\n\nexport type CoverageType = 'pro' | 'all' | 'none';\n\n/// note: these are not necessarily correct yet (except for testnet3)\nexport const networkPath = (network: Network): string => {\n  switch (network) {\n    case Network.AleoTestnet:\n      return 'testnet';\n    case Network.AleoMainnet:\n      return 'mainnet';\n  }\n};\n\nexport const zodEventType = z.nativeEnum(EventType);\nexport const zodEventStatus = z.nativeEnum(EventStatus);\nexport const zodNetwork = z.nativeEnum(Network);\nexport const zodVisibility = z.nativeEnum(Visibility);\nexport const zodRecordStatus = z.nativeEnum(RecordStatus);\n\nexport * from './aleo.js';\n"],"mappings":"AAAA,SAASA,CAAC,QAAQ,KAAK;AA+IvB,WAAYC,YAIX;AAJD,WAAYA,YAAY;cACtB;cACA;cACA;AACF,CAAC,EAJWA,YAAY,KAAZA,YAAY;AAUxB,OAAO,MAAMC,iBAAiB,GAAGA,CAC/BC,IAAkB,EAClBC,IAAc,KACuB;MACrCC,MAAI,GAAMF,IAA0B;OACpC,MAAKG,GAAM,IAAGF,IAAI,EAAI;QACpB,OAAIC,MAAO,KAAM,QAAK,IAAQA,MAAI,CAAAC,GAAM,CAAC,KAAIC,SAAK;aAChDA,SAAO;;UAET,GAAAF,MAAS,CAAAC,GAAM,CAAC;;SAElBD,MAAO;AACT,CAAC;AAED,OAAO,MAAMG,uBAAuB,GAAGA,CACrCL,IAAkB,EAClBC,IAAc,KACQ;QACtBC,MAAM,GAAMH,iBAAG,CAAAC,IAAkB,EAAIC,IAAE;MACvC,OAAIC,MAAO,KAAM,QAAK,EAAQ;WAC5BA,MAAO;;SAETE,SAAO;AACT,CAAC;AAmBD;AAEA,WAAYE,SAyBX;AAzBD,WAAYA,SAAS;WACnB;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAGA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;AACF,CAAC,EAzBWA,SAAS,KAATA,SAAS;AA2BrB,WAAYC,WAKX;AALD,WAAYA,WAAW;aACrB;aACA;aACA;aACA;AACF,CAAC,EALWA,WAAW,KAAXA,WAAW;AAOvB,WAAYC,UAGX;AAHD,WAAYA,UAAU;YACpB;YACA;AACF,CAAC,EAHWA,UAAU,KAAVA,UAAU;AAKtB,WAAYC,OAGX;AAHD,WAAYA,OAAO;SACjB;SACA;AACF,CAAC,EAHWA,OAAO,KAAPA,OAAO;AAOnB;AACA,OAAO,MAAMC,WAAW,GAAIC,OAAgB,IAAY;UACtDA,OAAQ;SACNF,OAAK,CAAAG,WAAQ;aACX,SAAO;SACTH,OAAK,CAAAI,WAAQ;aACX,SAAO;;AAEb,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGjB,CAAC,CAACkB,UAAU,CAACT,SAAS,CAAC;AACnD,OAAO,MAAMU,cAAc,GAAGnB,CAAC,CAACkB,UAAU,CAACR,WAAW,CAAC;AACvD,OAAO,MAAMU,UAAU,GAAGpB,CAAC,CAACkB,UAAU,CAACN,OAAO,CAAC;AAC/C,OAAO,MAAMS,aAAa,GAAGrB,CAAC,CAACkB,UAAU,CAACP,UAAU,CAAC;AACrD,OAAO,MAAMW,eAAe,GAAGtB,CAAC,CAACkB,UAAU,CAACjB,YAAY,CAAC;AAEzD,cAAc,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}