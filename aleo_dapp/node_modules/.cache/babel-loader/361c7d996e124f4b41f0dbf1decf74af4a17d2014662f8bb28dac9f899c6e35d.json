{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { useInjectedRequestQuery } from '../hooks/utils/useRequest.js';\nimport { useWalletStore } from '../store.js';\nimport { PuzzleWalletSDKEventEmitter, shortenAddress } from '@puzzlehq/sdk-core';\nexport const ConnectionContext = createContext(undefined);\nexport const useIsConnected = () => {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('useIsConnected must be used within a ConnectionProvider');\n  }\n  useEffect(() => {\n    console.log(`isConnected: ${context.isConnected}`);\n  }, [context.isConnected]);\n  return {\n    isConnected: context?.isConnected,\n    setIsConnected: context?.setIsConnected\n  };\n};\nexport const ConnectionProvider = ({\n  children\n}) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [account, onDisconnect, setAccount] = useWalletStore(state => [state.account, state.onDisconnect, state.setAccount]);\n  useEffect(() => {\n    PuzzleWalletSDKEventEmitter.on('connectSuccess', response => {\n      console.log('PuzzleWalletSDKEventEmitter.on(\\'connectSuccess\\') called!');\n      if (response.connection) {\n        setIsConnected(true);\n        setAccount({\n          address: response.connection.address,\n          network: response.connection.network,\n          shortenedAddress: shortenAddress(response.connection.address)\n        });\n      }\n    });\n    PuzzleWalletSDKEventEmitter.on('disconnectSuccess', () => {\n      setIsConnected(false);\n      onDisconnect();\n    });\n  }, []);\n  useInjectedRequestQuery({\n    queryKey: ['isConnected'],\n    enabled: true,\n    fetchFunction: async () => {\n      const response = await window.aleo.puzzleWalletClient.isConnected.query({\n        method: 'isConnected'\n      });\n      if (response === false && account) {\n        console.log(`ConnectionProvider isConnected: false, disconnecting`);\n        onDisconnect();\n      }\n      setIsConnected(response);\n      return response;\n    }\n  });\n  return _jsx(ConnectionContext.Provider, {\n    value: {\n      isConnected,\n      setIsConnected\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["jsx","_jsx","createContext","useContext","useEffect","useState","useInjectedRequestQuery","useWalletStore","PuzzleWalletSDKEventEmitter","shortenAddress","ConnectionContext","undefined","useIsConnected","context","Error","console","log","isConnected","setIsConnected","ConnectionProvider","children","account","onDisconnect","setAccount","state","on","response","connection","address","network","shortenedAddress","queryKey","enabled","fetchFunction","window","aleo","puzzleWalletClient","query","method","Provider","value"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@puzzlehq/sdk/dist/src/provider/connectionProvider.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { useInjectedRequestQuery } from '../hooks/utils/useRequest.js';\nimport { useWalletStore } from '../store.js';\nimport { PuzzleWalletSDKEventEmitter, shortenAddress } from '@puzzlehq/sdk-core';\nexport const ConnectionContext = createContext(undefined);\nexport const useIsConnected = () => {\n    const context = useContext(ConnectionContext);\n    if (!context) {\n        throw new Error('useIsConnected must be used within a ConnectionProvider');\n    }\n    useEffect(() => {\n        console.log(`isConnected: ${context.isConnected}`);\n    }, [context.isConnected]);\n    return {\n        isConnected: context?.isConnected,\n        setIsConnected: context?.setIsConnected,\n    };\n};\nexport const ConnectionProvider = ({ children }) => {\n    const [isConnected, setIsConnected] = useState(false);\n    const [account, onDisconnect, setAccount] = useWalletStore((state) => [\n        state.account,\n        state.onDisconnect,\n        state.setAccount,\n    ]);\n    useEffect(() => {\n        PuzzleWalletSDKEventEmitter.on('connectSuccess', (response) => {\n            console.log('PuzzleWalletSDKEventEmitter.on(\\'connectSuccess\\') called!');\n            if (response.connection) {\n                setIsConnected(true);\n                setAccount({\n                    address: response.connection.address,\n                    network: response.connection.network,\n                    shortenedAddress: shortenAddress(response.connection.address)\n                });\n            }\n        });\n        PuzzleWalletSDKEventEmitter.on('disconnectSuccess', () => {\n            setIsConnected(false);\n            onDisconnect();\n        });\n    }, []);\n    useInjectedRequestQuery({\n        queryKey: ['isConnected'],\n        enabled: true,\n        fetchFunction: async () => {\n            const response = await window.aleo.puzzleWalletClient.isConnected.query({\n                method: 'isConnected',\n            });\n            if (response === false && account) {\n                console.log(`ConnectionProvider isConnected: false, disconnecting`);\n                onDisconnect();\n            }\n            setIsConnected(response);\n            return response;\n        },\n    });\n    return (_jsx(ConnectionContext.Provider, { value: { isConnected, setIsConnected }, children: children }));\n};\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,uBAAuB,QAAQ,8BAA8B;AACtE,SAASC,cAAc,QAAQ,aAAa;AAC5C,SAASC,2BAA2B,EAAEC,cAAc,QAAQ,oBAAoB;AAChF,OAAO,MAAMC,iBAAiB,GAAGR,aAAa,CAACS,SAAS,CAAC;AACzD,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAChC,MAAMC,OAAO,GAAGV,UAAU,CAACO,iBAAiB,CAAC;EAC7C,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,yDAAyD,CAAC;EAC9E;EACAV,SAAS,CAAC,MAAM;IACZW,OAAO,CAACC,GAAG,CAAC,gBAAgBH,OAAO,CAACI,WAAW,EAAE,CAAC;EACtD,CAAC,EAAE,CAACJ,OAAO,CAACI,WAAW,CAAC,CAAC;EACzB,OAAO;IACHA,WAAW,EAAEJ,OAAO,EAAEI,WAAW;IACjCC,cAAc,EAAEL,OAAO,EAAEK;EAC7B,CAAC;AACL,CAAC;AACD,OAAO,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAChD,MAAM,CAACH,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgB,OAAO,EAAEC,YAAY,EAAEC,UAAU,CAAC,GAAGhB,cAAc,CAAEiB,KAAK,IAAK,CAClEA,KAAK,CAACH,OAAO,EACbG,KAAK,CAACF,YAAY,EAClBE,KAAK,CAACD,UAAU,CACnB,CAAC;EACFnB,SAAS,CAAC,MAAM;IACZI,2BAA2B,CAACiB,EAAE,CAAC,gBAAgB,EAAGC,QAAQ,IAAK;MAC3DX,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;MACzE,IAAIU,QAAQ,CAACC,UAAU,EAAE;QACrBT,cAAc,CAAC,IAAI,CAAC;QACpBK,UAAU,CAAC;UACPK,OAAO,EAAEF,QAAQ,CAACC,UAAU,CAACC,OAAO;UACpCC,OAAO,EAAEH,QAAQ,CAACC,UAAU,CAACE,OAAO;UACpCC,gBAAgB,EAAErB,cAAc,CAACiB,QAAQ,CAACC,UAAU,CAACC,OAAO;QAChE,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IACFpB,2BAA2B,CAACiB,EAAE,CAAC,mBAAmB,EAAE,MAAM;MACtDP,cAAc,CAAC,KAAK,CAAC;MACrBI,YAAY,CAAC,CAAC;IAClB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACNhB,uBAAuB,CAAC;IACpByB,QAAQ,EAAE,CAAC,aAAa,CAAC;IACzBC,OAAO,EAAE,IAAI;IACbC,aAAa,EAAE,MAAAA,CAAA,KAAY;MACvB,MAAMP,QAAQ,GAAG,MAAMQ,MAAM,CAACC,IAAI,CAACC,kBAAkB,CAACnB,WAAW,CAACoB,KAAK,CAAC;QACpEC,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,IAAIZ,QAAQ,KAAK,KAAK,IAAIL,OAAO,EAAE;QAC/BN,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;QACnEM,YAAY,CAAC,CAAC;MAClB;MACAJ,cAAc,CAACQ,QAAQ,CAAC;MACxB,OAAOA,QAAQ;IACnB;EACJ,CAAC,CAAC;EACF,OAAQzB,IAAI,CAACS,iBAAiB,CAAC6B,QAAQ,EAAE;IAAEC,KAAK,EAAE;MAAEvB,WAAW;MAAEC;IAAe,CAAC;IAAEE,QAAQ,EAAEA;EAAS,CAAC,CAAC;AAC5G,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}