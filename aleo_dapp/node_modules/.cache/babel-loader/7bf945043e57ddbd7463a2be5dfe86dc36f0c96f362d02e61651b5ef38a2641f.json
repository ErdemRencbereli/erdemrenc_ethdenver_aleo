{"ast":null,"code":"import { log_sdk, getRecords } from '@puzzlehq/sdk-core';\nimport { useWalletStore } from '../store.js';\nimport { useInjectedRequestQuery } from './utils/useRequest.js';\nimport { useDebounce } from 'use-debounce';\nimport useInjectedSubscriptions from './utils/useInjectedSubscription.js';\nimport { useIsConnected } from '../provider/PuzzleWalletProvider.js';\nexport const getFormattedRecordPlaintext = data => {\n  try {\n    return JSON.stringify(data, null, 2).replaceAll('\"', '') ?? '';\n  } catch {\n    return '';\n  }\n};\nexport const useRecords = ({\n  address,\n  multisig = false,\n  filter,\n  page,\n  network\n}) => {\n  const {\n    isConnected\n  } = useIsConnected();\n  const [account] = useWalletStore(state => [state.account]);\n  const [debouncedFilter] = useDebounce(filter, 500);\n  const queryKey = ['useRecords', account?.address, address, multisig, JSON.stringify(debouncedFilter), page];\n  const {\n    refetch,\n    data,\n    error: _error,\n    isLoading: loading\n  } = useInjectedRequestQuery({\n    queryKey,\n    enabled: (multisig ? !!address : true) && !!isConnected && !!account,\n    fetchFunction: async () => {\n      return await getRecords({\n        filter,\n        page,\n        address,\n        network\n      });\n    }\n  });\n  const readyToRequest = !!isConnected && !!account && (multisig ? !!address : true);\n  useInjectedSubscriptions({\n    configs: [{\n      subscriptionName: 'onSelectedAccountSynced',\n      condition: () => !multisig,\n      onData: () => refetch(),\n      onError: e => {\n        isConnected && console.error(e);\n      },\n      dependencies: [multisig]\n    }, {\n      subscriptionName: 'onSharedAccountSynced',\n      condition: data => {\n        return !!multisig && data?.address === address;\n      },\n      onData: () => refetch(),\n      onError: e => {\n        console.error(e);\n      },\n      dependencies: [multisig, address]\n    }]\n  });\n  const fetchPage = () => {\n    if (readyToRequest && !loading) {\n      log_sdk('useRecords refetching...', [address, multisig, filter, page]);\n      refetch();\n    }\n  };\n  const error = _error?.message ?? undefined;\n  const response = data;\n  const records = response?.records;\n  const pageCount = response?.pageCount ?? 0;\n  return {\n    fetchPage,\n    records,\n    error,\n    loading,\n    page,\n    pageCount\n  };\n};","map":{"version":3,"names":["log_sdk","getRecords","useWalletStore","useInjectedRequestQuery","useDebounce","useInjectedSubscriptions","useIsConnected","getFormattedRecordPlaintext","data","JSON","stringify","replaceAll","useRecords","address","multisig","filter","page","network","isConnected","account","state","debouncedFilter","queryKey","refetch","error","_error","isLoading","loading","enabled","fetchFunction","readyToRequest","configs","subscriptionName","condition","onData","onError","e","console","dependencies","fetchPage","message","undefined","response","records","pageCount"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@puzzlehq/sdk/dist/src/hooks/useRecords.js"],"sourcesContent":["import { log_sdk, getRecords, } from '@puzzlehq/sdk-core';\nimport { useWalletStore } from '../store.js';\nimport { useInjectedRequestQuery } from './utils/useRequest.js';\nimport { useDebounce } from 'use-debounce';\nimport useInjectedSubscriptions from './utils/useInjectedSubscription.js';\nimport { useIsConnected } from '../provider/PuzzleWalletProvider.js';\nexport const getFormattedRecordPlaintext = (data) => {\n    try {\n        return JSON.stringify(data, null, 2).replaceAll('\"', '') ?? '';\n    }\n    catch {\n        return '';\n    }\n};\nexport const useRecords = ({ address, multisig = false, filter, page, network, }) => {\n    const { isConnected } = useIsConnected();\n    const [account] = useWalletStore((state) => [state.account]);\n    const [debouncedFilter] = useDebounce(filter, 500);\n    const queryKey = [\n        'useRecords',\n        account?.address,\n        address,\n        multisig,\n        JSON.stringify(debouncedFilter),\n        page,\n    ];\n    const { refetch, data, error: _error, isLoading: loading, } = useInjectedRequestQuery({\n        queryKey,\n        enabled: (multisig ? !!address : true) && !!isConnected && !!account,\n        fetchFunction: async () => {\n            return await getRecords({\n                filter,\n                page,\n                address,\n                network,\n            });\n        },\n    });\n    const readyToRequest = !!isConnected && !!account && (multisig ? !!address : true);\n    useInjectedSubscriptions({\n        configs: [\n            {\n                subscriptionName: 'onSelectedAccountSynced',\n                condition: () => !multisig,\n                onData: () => refetch(),\n                onError: (e) => {\n                    isConnected && console.error(e);\n                },\n                dependencies: [multisig],\n            },\n            {\n                subscriptionName: 'onSharedAccountSynced',\n                condition: (data) => {\n                    return !!multisig && data?.address === address;\n                },\n                onData: () => refetch(),\n                onError: (e) => {\n                    console.error(e);\n                },\n                dependencies: [multisig, address],\n            },\n        ],\n    });\n    const fetchPage = () => {\n        if (readyToRequest && !loading) {\n            log_sdk('useRecords refetching...', [address, multisig, filter, page]);\n            refetch();\n        }\n    };\n    const error = _error?.message ?? undefined;\n    const response = data;\n    const records = response?.records;\n    const pageCount = response?.pageCount ?? 0;\n    return { fetchPage, records, error, loading, page, pageCount };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}