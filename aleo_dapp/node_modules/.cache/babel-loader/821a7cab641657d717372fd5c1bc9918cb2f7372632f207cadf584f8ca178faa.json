{"ast":null,"code":"import { useEffect } from 'react';\nimport { getAccount } from '@puzzlehq/sdk-core';\nimport { useWalletStore } from '../store.js';\nimport { useInjectedRequestQuery } from './utils/useRequest.js';\nimport { useIsConnected } from '../provider/PuzzleWalletProvider.js';\nexport const useAccount = () => {\n  const {\n    isConnected\n  } = useIsConnected();\n  const [account, setAccount] = useWalletStore(state => [state.account, state.setAccount]);\n  const {\n    refetch,\n    error: _error,\n    isLoading: loading\n  } = useInjectedRequestQuery({\n    queryKey: ['useAccount'],\n    enabled: !!isConnected,\n    fetchFunction: async () => {\n      const response = await getAccount();\n      if (response.account) {\n        setAccount(response.account);\n      }\n      return response;\n    }\n  });\n  // send initial account request...\n  useEffect(() => {\n    if (isConnected && !loading) {\n      refetch();\n    }\n  }, [isConnected]);\n  const error = _error?.message ?? undefined;\n  return {\n    account,\n    error,\n    loading\n  };\n};","map":{"version":3,"names":["useEffect","getAccount","useWalletStore","useInjectedRequestQuery","useIsConnected","useAccount","isConnected","account","setAccount","state","refetch","error","_error","isLoading","loading","queryKey","enabled","fetchFunction","response","message","undefined"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@puzzlehq/sdk/dist/src/hooks/useAccount.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { getAccount } from '@puzzlehq/sdk-core';\nimport { useWalletStore } from '../store.js';\nimport { useInjectedRequestQuery } from './utils/useRequest.js';\nimport { useIsConnected } from '../provider/PuzzleWalletProvider.js';\nexport const useAccount = () => {\n    const { isConnected } = useIsConnected();\n    const [account, setAccount] = useWalletStore((state) => [state.account, state.setAccount]);\n    const { refetch, error: _error, isLoading: loading, } = useInjectedRequestQuery({\n        queryKey: ['useAccount'],\n        enabled: !!isConnected,\n        fetchFunction: async () => {\n            const response = await getAccount();\n            if (response.account) {\n                setAccount(response.account);\n            }\n            return response;\n        },\n    });\n    // send initial account request...\n    useEffect(() => {\n        if (isConnected && !loading) {\n            refetch();\n        }\n    }, [isConnected]);\n    const error = _error?.message ?? undefined;\n    return {\n        account,\n        error,\n        loading,\n    };\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,cAAc,QAAQ,aAAa;AAC5C,SAASC,uBAAuB,QAAQ,uBAAuB;AAC/D,SAASC,cAAc,QAAQ,qCAAqC;AACpE,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC5B,MAAM;IAAEC;EAAY,CAAC,GAAGF,cAAc,CAAC,CAAC;EACxC,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGN,cAAc,CAAEO,KAAK,IAAK,CAACA,KAAK,CAACF,OAAO,EAAEE,KAAK,CAACD,UAAU,CAAC,CAAC;EAC1F,MAAM;IAAEE,OAAO;IAAEC,KAAK,EAAEC,MAAM;IAAEC,SAAS,EAAEC;EAAS,CAAC,GAAGX,uBAAuB,CAAC;IAC5EY,QAAQ,EAAE,CAAC,YAAY,CAAC;IACxBC,OAAO,EAAE,CAAC,CAACV,WAAW;IACtBW,aAAa,EAAE,MAAAA,CAAA,KAAY;MACvB,MAAMC,QAAQ,GAAG,MAAMjB,UAAU,CAAC,CAAC;MACnC,IAAIiB,QAAQ,CAACX,OAAO,EAAE;QAClBC,UAAU,CAACU,QAAQ,CAACX,OAAO,CAAC;MAChC;MACA,OAAOW,QAAQ;IACnB;EACJ,CAAC,CAAC;EACF;EACAlB,SAAS,CAAC,MAAM;IACZ,IAAIM,WAAW,IAAI,CAACQ,OAAO,EAAE;MACzBJ,OAAO,CAAC,CAAC;IACb;EACJ,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC;EACjB,MAAMK,KAAK,GAAGC,MAAM,EAAEO,OAAO,IAAIC,SAAS;EAC1C,OAAO;IACHb,OAAO;IACPI,KAAK;IACLG;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}