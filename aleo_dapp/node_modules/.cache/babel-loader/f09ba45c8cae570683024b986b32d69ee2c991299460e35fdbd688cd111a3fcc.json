{"ast":null,"code":"import { Fragment as _Fragment, jsx as _jsx } from \"react/jsx-runtime\";\nimport useInjectedSubscriptions from '../hooks/utils/useInjectedSubscription.js';\nimport { shortenAddress } from '@puzzlehq/sdk-core';\nimport { useIsConnected } from './connectionProvider.js';\nimport { useWalletStore } from '../store.js';\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  const {\n    isConnected,\n    setIsConnected\n  } = useIsConnected();\n  const [onDisconnect, setAccount] = useWalletStore(state => [state.onDisconnect, state.setAccount]);\n  useInjectedSubscriptions({\n    configs: [{\n      subscriptionName: 'onAccountSelected',\n      condition: () => !!isConnected,\n      onData: data => {\n        setAccount({\n          network: data.network,\n          address: data.address,\n          shortenedAddress: shortenAddress(data.address)\n        });\n      },\n      onError: e => {\n        console.error(e);\n      },\n      dependencies: [isConnected]\n    }, {\n      subscriptionName: 'onSelectedAccountSynced',\n      condition: () => !!isConnected,\n      onData: data => {\n        setIsConnected(true);\n        setAccount({\n          network: data.network,\n          address: data.address,\n          shortenedAddress: shortenAddress(data.address)\n        });\n      },\n      onError: e => {\n        console.error(e);\n      },\n      dependencies: [isConnected]\n    }, {\n      subscriptionName: 'onDisconnect',\n      condition: () => !!isConnected,\n      onData: () => {\n        console.log('Wallet-originated disconnect');\n        onDisconnect();\n        setIsConnected(false);\n      },\n      onError: e => {\n        console.error(e);\n      },\n      dependencies: [isConnected]\n    }]\n  });\n  return _jsx(_Fragment, {\n    children: children\n  });\n};","map":{"version":3,"names":["Fragment","_Fragment","jsx","_jsx","useInjectedSubscriptions","shortenAddress","useIsConnected","useWalletStore","SubscriptionProvider","children","isConnected","setIsConnected","onDisconnect","setAccount","state","configs","subscriptionName","condition","onData","data","network","address","shortenedAddress","onError","e","console","error","dependencies","log"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@puzzlehq/sdk/dist/src/provider/subscriptionProvider.js"],"sourcesContent":["import { Fragment as _Fragment, jsx as _jsx } from \"react/jsx-runtime\";\nimport useInjectedSubscriptions from '../hooks/utils/useInjectedSubscription.js';\nimport { shortenAddress } from '@puzzlehq/sdk-core';\nimport { useIsConnected } from './connectionProvider.js';\nimport { useWalletStore } from '../store.js';\nexport const SubscriptionProvider = ({ children }) => {\n    const { isConnected, setIsConnected } = useIsConnected();\n    const [onDisconnect, setAccount] = useWalletStore((state) => [state.onDisconnect, state.setAccount]);\n    useInjectedSubscriptions({\n        configs: [\n            {\n                subscriptionName: 'onAccountSelected',\n                condition: () => !!isConnected,\n                onData: (data) => {\n                    setAccount({\n                        network: data.network,\n                        address: data.address,\n                        shortenedAddress: shortenAddress(data.address),\n                    });\n                },\n                onError: (e) => {\n                    console.error(e);\n                },\n                dependencies: [isConnected],\n            },\n            {\n                subscriptionName: 'onSelectedAccountSynced',\n                condition: () => !!isConnected,\n                onData: (data) => {\n                    setIsConnected(true);\n                    setAccount({\n                        network: data.network,\n                        address: data.address,\n                        shortenedAddress: shortenAddress(data.address),\n                    });\n                },\n                onError: (e) => {\n                    console.error(e);\n                },\n                dependencies: [isConnected],\n            },\n            {\n                subscriptionName: 'onDisconnect',\n                condition: () => !!isConnected,\n                onData: () => {\n                    console.log('Wallet-originated disconnect');\n                    onDisconnect();\n                    setIsConnected(false);\n                },\n                onError: (e) => {\n                    console.error(e);\n                },\n                dependencies: [isConnected],\n            },\n        ],\n    });\n    return _jsx(_Fragment, { children: children });\n};\n"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,SAAS,EAAEC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AACtE,OAAOC,wBAAwB,MAAM,2CAA2C;AAChF,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,cAAc,QAAQ,aAAa;AAC5C,OAAO,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAClD,MAAM;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGL,cAAc,CAAC,CAAC;EACxD,MAAM,CAACM,YAAY,EAAEC,UAAU,CAAC,GAAGN,cAAc,CAAEO,KAAK,IAAK,CAACA,KAAK,CAACF,YAAY,EAAEE,KAAK,CAACD,UAAU,CAAC,CAAC;EACpGT,wBAAwB,CAAC;IACrBW,OAAO,EAAE,CACL;MACIC,gBAAgB,EAAE,mBAAmB;MACrCC,SAAS,EAAEA,CAAA,KAAM,CAAC,CAACP,WAAW;MAC9BQ,MAAM,EAAGC,IAAI,IAAK;QACdN,UAAU,CAAC;UACPO,OAAO,EAAED,IAAI,CAACC,OAAO;UACrBC,OAAO,EAAEF,IAAI,CAACE,OAAO;UACrBC,gBAAgB,EAAEjB,cAAc,CAACc,IAAI,CAACE,OAAO;QACjD,CAAC,CAAC;MACN,CAAC;MACDE,OAAO,EAAGC,CAAC,IAAK;QACZC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MACpB,CAAC;MACDG,YAAY,EAAE,CAACjB,WAAW;IAC9B,CAAC,EACD;MACIM,gBAAgB,EAAE,yBAAyB;MAC3CC,SAAS,EAAEA,CAAA,KAAM,CAAC,CAACP,WAAW;MAC9BQ,MAAM,EAAGC,IAAI,IAAK;QACdR,cAAc,CAAC,IAAI,CAAC;QACpBE,UAAU,CAAC;UACPO,OAAO,EAAED,IAAI,CAACC,OAAO;UACrBC,OAAO,EAAEF,IAAI,CAACE,OAAO;UACrBC,gBAAgB,EAAEjB,cAAc,CAACc,IAAI,CAACE,OAAO;QACjD,CAAC,CAAC;MACN,CAAC;MACDE,OAAO,EAAGC,CAAC,IAAK;QACZC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MACpB,CAAC;MACDG,YAAY,EAAE,CAACjB,WAAW;IAC9B,CAAC,EACD;MACIM,gBAAgB,EAAE,cAAc;MAChCC,SAAS,EAAEA,CAAA,KAAM,CAAC,CAACP,WAAW;MAC9BQ,MAAM,EAAEA,CAAA,KAAM;QACVO,OAAO,CAACG,GAAG,CAAC,8BAA8B,CAAC;QAC3ChB,YAAY,CAAC,CAAC;QACdD,cAAc,CAAC,KAAK,CAAC;MACzB,CAAC;MACDY,OAAO,EAAGC,CAAC,IAAK;QACZC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MACpB,CAAC;MACDG,YAAY,EAAE,CAACjB,WAAW;IAC9B,CAAC;EAET,CAAC,CAAC;EACF,OAAOP,IAAI,CAACF,SAAS,EAAE;IAAEQ,QAAQ,EAAEA;EAAS,CAAC,CAAC;AAClD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}