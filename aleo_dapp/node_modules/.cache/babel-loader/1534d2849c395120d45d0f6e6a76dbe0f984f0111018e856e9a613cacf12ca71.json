{"ast":null,"code":"import { useEffect } from 'react';\nimport { getBalance } from '@puzzlehq/sdk-core';\nimport { useInjectedRequestQuery } from './utils/useRequest.js';\nimport { useWalletStore } from '../store.js';\nimport useInjectedSubscriptions from './utils/useInjectedSubscription.js';\nimport { useIsConnected } from '../provider/PuzzleWalletProvider.js';\nexport const useBalance = ({\n  address,\n  network,\n  multisig\n} = {}) => {\n  const {\n    isConnected\n  } = useIsConnected();\n  const [account] = useWalletStore(state => [state.account]);\n  const {\n    refetch,\n    data,\n    error: _error,\n    isLoading: loading\n  } = useInjectedRequestQuery({\n    queryKey: ['useBalance', address, account?.address ?? '', network, multisig],\n    enabled: !!isConnected,\n    fetchFunction: async () => {\n      return await getBalance({\n        address,\n        network\n      });\n    }\n  });\n  // listen for injected wallet-originating account updates\n  useInjectedSubscriptions({\n    configs: [{\n      subscriptionName: 'onSelectedAccountSynced',\n      condition: () => {\n        return !multisig;\n      },\n      onData: () => refetch(),\n      onError: e => {\n        console.error(e);\n      },\n      dependencies: [multisig]\n    }, {\n      subscriptionName: 'onSharedAccountSynced',\n      condition: data => {\n        return !!multisig && data?.address === address;\n      },\n      onData: () => refetch(),\n      onError: e => {\n        console.error(e);\n      },\n      dependencies: [multisig, address]\n    }]\n  });\n  // send initial balance request...\n  useEffect(() => {\n    if (isConnected && !loading) {\n      refetch();\n    }\n  }, [isConnected]);\n  const error = _error?.message ?? undefined;\n  const response = data;\n  const balances = response?.balances;\n  return {\n    balances,\n    error,\n    loading\n  };\n};","map":{"version":3,"names":["useEffect","getBalance","useInjectedRequestQuery","useWalletStore","useInjectedSubscriptions","useIsConnected","useBalance","address","network","multisig","isConnected","account","state","refetch","data","error","_error","isLoading","loading","queryKey","enabled","fetchFunction","configs","subscriptionName","condition","onData","onError","e","console","dependencies","message","undefined","response","balances"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@puzzlehq/sdk/dist/src/hooks/useBalance.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { getBalance, } from '@puzzlehq/sdk-core';\nimport { useInjectedRequestQuery } from './utils/useRequest.js';\nimport { useWalletStore } from '../store.js';\nimport useInjectedSubscriptions from './utils/useInjectedSubscription.js';\nimport { useIsConnected } from '../provider/PuzzleWalletProvider.js';\nexport const useBalance = ({ address, network, multisig, } = {}) => {\n    const { isConnected } = useIsConnected();\n    const [account] = useWalletStore((state) => [state.account]);\n    const { refetch, data, error: _error, isLoading: loading, } = useInjectedRequestQuery({\n        queryKey: [\n            'useBalance',\n            address,\n            account?.address ?? '',\n            network,\n            multisig,\n        ],\n        enabled: !!isConnected,\n        fetchFunction: async () => {\n            return await getBalance({ address, network });\n        },\n    });\n    // listen for injected wallet-originating account updates\n    useInjectedSubscriptions({\n        configs: [\n            {\n                subscriptionName: 'onSelectedAccountSynced',\n                condition: () => {\n                    return !multisig;\n                },\n                onData: () => refetch(),\n                onError: (e) => {\n                    console.error(e);\n                },\n                dependencies: [multisig],\n            },\n            {\n                subscriptionName: 'onSharedAccountSynced',\n                condition: (data) => {\n                    return !!multisig && data?.address === address;\n                },\n                onData: () => refetch(),\n                onError: (e) => {\n                    console.error(e);\n                },\n                dependencies: [multisig, address],\n            },\n        ],\n    });\n    // send initial balance request...\n    useEffect(() => {\n        if (isConnected && !loading) {\n            refetch();\n        }\n    }, [isConnected]);\n    const error = _error?.message ?? undefined;\n    const response = data;\n    const balances = response?.balances;\n    return { balances, error, loading };\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAS,oBAAoB;AAChD,SAASC,uBAAuB,QAAQ,uBAAuB;AAC/D,SAASC,cAAc,QAAQ,aAAa;AAC5C,OAAOC,wBAAwB,MAAM,oCAAoC;AACzE,SAASC,cAAc,QAAQ,qCAAqC;AACpE,OAAO,MAAMC,UAAU,GAAGA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAU,CAAC,GAAG,CAAC,CAAC,KAAK;EAChE,MAAM;IAAEC;EAAY,CAAC,GAAGL,cAAc,CAAC,CAAC;EACxC,MAAM,CAACM,OAAO,CAAC,GAAGR,cAAc,CAAES,KAAK,IAAK,CAACA,KAAK,CAACD,OAAO,CAAC,CAAC;EAC5D,MAAM;IAAEE,OAAO;IAAEC,IAAI;IAAEC,KAAK,EAAEC,MAAM;IAAEC,SAAS,EAAEC;EAAS,CAAC,GAAGhB,uBAAuB,CAAC;IAClFiB,QAAQ,EAAE,CACN,YAAY,EACZZ,OAAO,EACPI,OAAO,EAAEJ,OAAO,IAAI,EAAE,EACtBC,OAAO,EACPC,QAAQ,CACX;IACDW,OAAO,EAAE,CAAC,CAACV,WAAW;IACtBW,aAAa,EAAE,MAAAA,CAAA,KAAY;MACvB,OAAO,MAAMpB,UAAU,CAAC;QAAEM,OAAO;QAAEC;MAAQ,CAAC,CAAC;IACjD;EACJ,CAAC,CAAC;EACF;EACAJ,wBAAwB,CAAC;IACrBkB,OAAO,EAAE,CACL;MACIC,gBAAgB,EAAE,yBAAyB;MAC3CC,SAAS,EAAEA,CAAA,KAAM;QACb,OAAO,CAACf,QAAQ;MACpB,CAAC;MACDgB,MAAM,EAAEA,CAAA,KAAMZ,OAAO,CAAC,CAAC;MACvBa,OAAO,EAAGC,CAAC,IAAK;QACZC,OAAO,CAACb,KAAK,CAACY,CAAC,CAAC;MACpB,CAAC;MACDE,YAAY,EAAE,CAACpB,QAAQ;IAC3B,CAAC,EACD;MACIc,gBAAgB,EAAE,uBAAuB;MACzCC,SAAS,EAAGV,IAAI,IAAK;QACjB,OAAO,CAAC,CAACL,QAAQ,IAAIK,IAAI,EAAEP,OAAO,KAAKA,OAAO;MAClD,CAAC;MACDkB,MAAM,EAAEA,CAAA,KAAMZ,OAAO,CAAC,CAAC;MACvBa,OAAO,EAAGC,CAAC,IAAK;QACZC,OAAO,CAACb,KAAK,CAACY,CAAC,CAAC;MACpB,CAAC;MACDE,YAAY,EAAE,CAACpB,QAAQ,EAAEF,OAAO;IACpC,CAAC;EAET,CAAC,CAAC;EACF;EACAP,SAAS,CAAC,MAAM;IACZ,IAAIU,WAAW,IAAI,CAACQ,OAAO,EAAE;MACzBL,OAAO,CAAC,CAAC;IACb;EACJ,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;EACjB,MAAMK,KAAK,GAAGC,MAAM,EAAEc,OAAO,IAAIC,SAAS;EAC1C,MAAMC,QAAQ,GAAGlB,IAAI;EACrB,MAAMmB,QAAQ,GAAGD,QAAQ,EAAEC,QAAQ;EACnC,OAAO;IAAEA,QAAQ;IAAElB,KAAK;IAAEG;EAAQ,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}