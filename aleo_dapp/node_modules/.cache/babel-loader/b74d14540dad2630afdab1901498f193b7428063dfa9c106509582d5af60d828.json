{"ast":null,"code":"import z from 'zod';\nexport const containsAleoAddressRegex = /aleo1[a-z0-9]{58}/gi;\nexport const aleoAddressRegex = /^aleo1[a-z0-9]{58}$/i;\nexport const aleoViewKeyRegex = /^AViewKey1[a-z0-9]{44}$/i;\nexport const aleoPrivateKeyRegex = /^APrivateKey1[a-z0-9]{47}$/i;\nexport const aleoTransitionIdRegex = /^au1[a-z0-9]{58}$/i;\nexport const aleoTransactionIdRegex = /^at1[a-z0-9]{58}$/i;\nexport const aleoFieldRegex = /^\\d+field$/;\nexport const aleoU32 = /^\\d+u32$/;\nexport const aleoU64 = /^\\d+u64$/;\nexport const zodAddress = z.string().regex(aleoAddressRegex);\nexport const zodViewKey = z.string().regex(aleoViewKeyRegex);\nexport const zodPrivateKey = z.string().regex(aleoPrivateKeyRegex);\nexport const zodTransitionId = z.string().regex(aleoTransitionIdRegex);\nexport const zodTransactionId = z.string().regex(aleoTransactionIdRegex);\nexport const zodField = z.string().regex(aleoFieldRegex);\nexport const zodU32 = z.string().regex(aleoU32);\nexport const zodU64 = z.string().regex(aleoU64);\nexport var InputOutputType;\n(function (InputOutputType) {\n  InputOutputType['Record'] = 'record';\n  InputOutputType['OutputRecord'] = 'outputRecord';\n  InputOutputType['Public'] = 'public';\n  InputOutputType['Private'] = 'private';\n  InputOutputType['Constant'] = 'constant';\n  InputOutputType['Future'] = 'future';\n  InputOutputType['ExternalRecord'] = 'external_record';\n})(InputOutputType || (InputOutputType = {}));","map":{"version":3,"names":["z","containsAleoAddressRegex","aleoAddressRegex","aleoViewKeyRegex","aleoPrivateKeyRegex","aleoTransitionIdRegex","aleoTransactionIdRegex","aleoFieldRegex","aleoU32","aleoU64","zodAddress","string","regex","zodViewKey","zodPrivateKey","zodTransitionId","zodTransactionId","zodField","zodU32","zodU64","InputOutputType"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@puzzlehq/types/aleo.ts"],"sourcesContent":["import z from 'zod';\n\nexport const containsAleoAddressRegex = /aleo1[a-z0-9]{58}/gi;\nexport const aleoAddressRegex = /^aleo1[a-z0-9]{58}$/i;\nexport const aleoViewKeyRegex = /^AViewKey1[a-z0-9]{44}$/i;\nexport const aleoPrivateKeyRegex = /^APrivateKey1[a-z0-9]{47}$/i;\nexport const aleoTransitionIdRegex = /^au1[a-z0-9]{58}$/i;\nexport const aleoTransactionIdRegex = /^at1[a-z0-9]{58}$/i;\nexport const aleoFieldRegex = /^\\d+field$/;\nexport const aleoU32 = /^\\d+u32$/;\nexport const aleoU64 = /^\\d+u64$/;\n\nexport const zodAddress = z.string().regex(aleoAddressRegex);\nexport const zodViewKey = z.string().regex(aleoViewKeyRegex);\nexport const zodPrivateKey = z.string().regex(aleoPrivateKeyRegex);\nexport const zodTransitionId = z.string().regex(aleoTransitionIdRegex);\nexport const zodTransactionId = z.string().regex(aleoTransactionIdRegex);\nexport const zodField = z.string().regex(aleoFieldRegex);\nexport const zodU32 = z.string().regex(aleoU32);\nexport const zodU64 = z.string().regex(aleoU64);\n\nexport type Block = {\n  header: Header;\n  transactions: TransactionWrapper[];\n  aborted_transaction_ids: string[];\n};\n\nexport type Header = {\n  metadata: Metadata;\n};\n\nexport type Metadata = {\n  height: number;\n  timestamp: number;\n};\n\nexport type TransactionWrapper = {\n  status: string;\n  type: string;\n  index: number;\n  transaction: Transaction;\n  finalize: any[];\n};\n\nexport type Transaction = {\n  type: string;\n  id: string;\n  execution?: Execution;\n  deployment?: Deployment;\n  owner?: Owner;\n  fee?: Fee;\n};\n\nexport type Execution = {\n  transitions: Transition[];\n  global_state_root: string;\n  proof: string;\n};\n\nexport type Deployment = {\n  edition: number;\n  program: string;\n};\n\nexport type Owner = {\n  address: string;\n};\n\nexport type Fee = {\n  transition: Transition;\n  global_state_root: string;\n  proof: string;\n};\n\nexport type Transition = {\n  id: string;\n  program: string;\n  function: string;\n  inputs: Input[];\n  outputs: Output[];\n  finalize?: string[];\n  tpk: string;\n  tcm: string;\n  scm: string;\n};\n\nexport type Input = {\n  type: InputOutputType;\n  id: string;\n  tag?: string;\n  value?: string;\n};\n\nexport type Output = {\n  type: InputOutputType;\n  id: string;\n  value: string;\n  checksum?: string;\n};\n\nexport enum InputOutputType {\n  Record = 'record',\n  OutputRecord = 'outputRecord',\n  Public = 'public',\n  Private = 'private',\n  Constant = 'constant',\n  Future = 'future',\n  ExternalRecord = 'external_record',\n}\n"],"mappings":"AAAA,OAAOA,CAAC,MAAM,KAAK;AAEnB,OAAO,MAAMC,wBAAwB,GAAG,qBAAqB;AAC7D,OAAO,MAAMC,gBAAgB,GAAG,sBAAsB;AACtD,OAAO,MAAMC,gBAAgB,GAAG,0BAA0B;AAC1D,OAAO,MAAMC,mBAAmB,GAAG,6BAA6B;AAChE,OAAO,MAAMC,qBAAqB,GAAG,oBAAoB;AACzD,OAAO,MAAMC,sBAAsB,GAAG,oBAAoB;AAC1D,OAAO,MAAMC,cAAc,GAAG,YAAY;AAC1C,OAAO,MAAMC,OAAO,GAAG,UAAU;AACjC,OAAO,MAAMC,OAAO,GAAG,UAAU;AAEjC,OAAO,MAAMC,UAAU,GAAGV,CAAC,CAACW,MAAM,EAAE,CAACC,KAAK,CAACV,gBAAgB,CAAC;AAC5D,OAAO,MAAMW,UAAU,GAAGb,CAAC,CAACW,MAAM,EAAE,CAACC,KAAK,CAACT,gBAAgB,CAAC;AAC5D,OAAO,MAAMW,aAAa,GAAGd,CAAC,CAACW,MAAM,EAAE,CAACC,KAAK,CAACR,mBAAmB,CAAC;AAClE,OAAO,MAAMW,eAAe,GAAGf,CAAC,CAACW,MAAM,EAAE,CAACC,KAAK,CAACP,qBAAqB,CAAC;AACtE,OAAO,MAAMW,gBAAgB,GAAGhB,CAAC,CAACW,MAAM,EAAE,CAACC,KAAK,CAACN,sBAAsB,CAAC;AACxE,OAAO,MAAMW,QAAQ,GAAGjB,CAAC,CAACW,MAAM,EAAE,CAACC,KAAK,CAACL,cAAc,CAAC;AACxD,OAAO,MAAMW,MAAM,GAAGlB,CAAC,CAACW,MAAM,EAAE,CAACC,KAAK,CAACJ,OAAO,CAAC;AAC/C,OAAO,MAAMW,MAAM,GAAGnB,CAAC,CAACW,MAAM,EAAE,CAACC,KAAK,CAACH,OAAO,CAAC;AAiF/C,WAAYW,eAQX;AARD,WAAYA,eAAe;iBACzB;iBACA;iBACA;iBACA;iBACA;iBACA;iBACA;AACF,CAAC,EARWA,eAAe,KAAfA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}