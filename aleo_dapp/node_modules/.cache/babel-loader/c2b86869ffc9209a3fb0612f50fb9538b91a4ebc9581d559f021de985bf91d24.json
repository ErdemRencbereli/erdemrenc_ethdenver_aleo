{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nexport { EventEmitter };\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\nexport var WalletReadyState;\n(function (WalletReadyState) {\n  /**\n   * User-installable wallets can typically be detected by scanning for an API\n   * that they've injected into the global context. If such an API is present,\n   * we consider the wallet to have been installed.\n   */\n  WalletReadyState[\"Installed\"] = \"Installed\";\n  WalletReadyState[\"NotDetected\"] = \"NotDetected\";\n  /**\n   * Loadable wallets are always available to you. Since you can load them at\n   * any time, it's meaningless to say that they have been detected.\n   */\n  WalletReadyState[\"Loadable\"] = \"Loadable\";\n  /**\n   * If a wallet is not supported on a given platform (eg. server-rendering, or\n   * mobile) then it will stay in the `Unsupported` state.\n   */\n  WalletReadyState[\"Unsupported\"] = \"Unsupported\";\n})(WalletReadyState || (WalletReadyState = {}));\nexport class BaseWalletAdapter extends EventEmitter {\n  get connected() {\n    return !!this.publicKey;\n  }\n}\nexport function scopePollingDetectionStrategy(detect) {\n  // Early return when server-side rendering\n  if (typeof window === 'undefined' || typeof document === 'undefined') return;\n  const disposers = [];\n  function detectAndDispose() {\n    const detected = detect();\n    if (detected) {\n      for (const dispose of disposers) {\n        dispose();\n      }\n    }\n  }\n  // Strategy #1: Try detecting every second.\n  const interval =\n  // TODO: #334 Replace with idle callback strategy.\n  setInterval(detectAndDispose, 1000);\n  disposers.push(() => clearInterval(interval));\n  // Strategy #2: Detect as soon as the DOM becomes 'ready'/'interactive'.\n  if (\n  // Implies that `DOMContentLoaded` has not yet fired.\n  document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => document.removeEventListener('DOMContentLoaded', detectAndDispose));\n  }\n  // Strategy #3: Detect after the `window` has fully loaded.\n  if (\n  // If the `complete` state has been reached, we're too late.\n  document.readyState !== 'complete') {\n    window.addEventListener('load', detectAndDispose, {\n      once: true\n    });\n    disposers.push(() => window.removeEventListener('load', detectAndDispose));\n  }\n  // Strategy #4: Detect synchronously, now.\n  detectAndDispose();\n}","map":{"version":3,"names":["EventEmitter","WalletReadyState","BaseWalletAdapter","connected","publicKey","scopePollingDetectionStrategy","detect","window","document","disposers","detectAndDispose","detected","dispose","interval","setInterval","push","clearInterval","readyState","addEventListener","once","removeEventListener"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@demox-labs/aleo-wallet-adapter-leo/node_modules/@demox-labs/aleo-wallet-adapter-base/adapter.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport type { WalletError } from './errors';\nimport type { SupportedTransactionVersions, DecryptPermission, WalletAdapterNetwork } from './types';\n\nexport { EventEmitter };\n\nexport interface WalletAdapterEvents {\n    connect(publicKey: string, programs?: string[]): void;\n    disconnect(): void;\n    error(error: WalletError): void;\n    readyStateChange(readyState: WalletReadyState): void;\n}\n\n// WalletName is a nominal type that wallet adapters should use, e.g. `'MyCryptoWallet' as WalletName<'MyCryptoWallet'>`\n// https://medium.com/@KevinBGreene/surviving-the-typescript-ecosystem-branding-and-type-tagging-6cf6e516523d\nexport type WalletName<T extends string = string> = T & { __brand__: 'WalletName' };\n\nexport interface WalletAdapterProps<Name extends string = string> {\n    name: WalletName<Name>;\n    url: string;\n    icon: string;\n    readyState: WalletReadyState;\n    publicKey: string | null;\n    connecting: boolean;\n    connected: boolean;\n    supportedTransactionVersions: SupportedTransactionVersions;\n\n    connect(decryptPermission: DecryptPermission, network: WalletAdapterNetwork, programs?: string[]): Promise<void>;\n    disconnect(): Promise<void>;\n}\n\nexport type WalletAdapter<Name extends string = string> = WalletAdapterProps<Name> & EventEmitter<WalletAdapterEvents>;\n\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\nexport enum WalletReadyState {\n    /**\n     * User-installable wallets can typically be detected by scanning for an API\n     * that they've injected into the global context. If such an API is present,\n     * we consider the wallet to have been installed.\n     */\n    Installed = 'Installed',\n    NotDetected = 'NotDetected',\n    /**\n     * Loadable wallets are always available to you. Since you can load them at\n     * any time, it's meaningless to say that they have been detected.\n     */\n    Loadable = 'Loadable',\n    /**\n     * If a wallet is not supported on a given platform (eg. server-rendering, or\n     * mobile) then it will stay in the `Unsupported` state.\n     */\n    Unsupported = 'Unsupported',\n}\n\nexport abstract class BaseWalletAdapter<Name extends string = string>\n    extends EventEmitter<WalletAdapterEvents>\n    implements WalletAdapter<Name>\n{\n    abstract name: WalletName<Name>;\n    abstract url: string;\n    abstract icon: string;\n    abstract readyState: WalletReadyState;\n    abstract publicKey: string | null;\n    abstract connecting: boolean;\n    abstract supportedTransactionVersions: SupportedTransactionVersions;\n\n    get connected() {\n        return !!this.publicKey;\n    }\n\n    abstract connect(decryptPermission: DecryptPermission, network: WalletAdapterNetwork, programs?: string[]): Promise<void>;\n    abstract disconnect(): Promise<void>;\n}\n\nexport function scopePollingDetectionStrategy(detect: () => boolean): void {\n    // Early return when server-side rendering\n    if (typeof window === 'undefined' || typeof document === 'undefined') return;\n\n    const disposers: (() => void)[] = [];\n\n    function detectAndDispose() {\n        const detected = detect();\n        if (detected) {\n            for (const dispose of disposers) {\n                dispose();\n            }\n        }\n    }\n\n    // Strategy #1: Try detecting every second.\n    const interval =\n        // TODO: #334 Replace with idle callback strategy.\n        setInterval(detectAndDispose, 1000);\n    disposers.push(() => clearInterval(interval));\n\n    // Strategy #2: Detect as soon as the DOM becomes 'ready'/'interactive'.\n    if (\n        // Implies that `DOMContentLoaded` has not yet fired.\n        document.readyState === 'loading'\n    ) {\n        document.addEventListener('DOMContentLoaded', detectAndDispose, { once: true });\n        disposers.push(() => document.removeEventListener('DOMContentLoaded', detectAndDispose));\n    }\n\n    // Strategy #3: Detect after the `window` has fully loaded.\n    if (\n        // If the `complete` state has been reached, we're too late.\n        document.readyState !== 'complete'\n    ) {\n        window.addEventListener('load', detectAndDispose, { once: true });\n        disposers.push(() => window.removeEventListener('load', detectAndDispose));\n    }\n\n    // Strategy #4: Detect synchronously, now.\n    detectAndDispose();\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,eAAe;AAIxC,SAASA,YAAY;AA6BrB;;;;;;;;;AASA,WAAYC,gBAkBX;AAlBD,WAAYA,gBAAgB;EACxB;;;;;EAKAA,gBAAA,2BAAuB;EACvBA,gBAAA,+BAA2B;EAC3B;;;;EAIAA,gBAAA,yBAAqB;EACrB;;;;EAIAA,gBAAA,+BAA2B;AAC/B,CAAC,EAlBWA,gBAAgB,KAAhBA,gBAAgB;AAoB5B,OAAM,MAAgBC,iBAClB,SAAQF,YAAiC;EAWzC,IAAIG,SAASA,CAAA;IACT,OAAO,CAAC,CAAC,IAAI,CAACC,SAAS;EAC3B;;AAMJ,OAAM,SAAUC,6BAA6BA,CAACC,MAAqB;EAC/D;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;EAEtE,MAAMC,SAAS,GAAmB,EAAE;EAEpC,SAASC,gBAAgBA,CAAA;IACrB,MAAMC,QAAQ,GAAGL,MAAM,EAAE;IACzB,IAAIK,QAAQ,EAAE;MACV,KAAK,MAAMC,OAAO,IAAIH,SAAS,EAAE;QAC7BG,OAAO,EAAE;;;EAGrB;EAEA;EACA,MAAMC,QAAQ;EACV;EACAC,WAAW,CAACJ,gBAAgB,EAAE,IAAI,CAAC;EACvCD,SAAS,CAACM,IAAI,CAAC,MAAMC,aAAa,CAACH,QAAQ,CAAC,CAAC;EAE7C;EACA;EACI;EACAL,QAAQ,CAACS,UAAU,KAAK,SAAS,EACnC;IACET,QAAQ,CAACU,gBAAgB,CAAC,kBAAkB,EAAER,gBAAgB,EAAE;MAAES,IAAI,EAAE;IAAI,CAAE,CAAC;IAC/EV,SAAS,CAACM,IAAI,CAAC,MAAMP,QAAQ,CAACY,mBAAmB,CAAC,kBAAkB,EAAEV,gBAAgB,CAAC,CAAC;;EAG5F;EACA;EACI;EACAF,QAAQ,CAACS,UAAU,KAAK,UAAU,EACpC;IACEV,MAAM,CAACW,gBAAgB,CAAC,MAAM,EAAER,gBAAgB,EAAE;MAAES,IAAI,EAAE;IAAI,CAAE,CAAC;IACjEV,SAAS,CAACM,IAAI,CAAC,MAAMR,MAAM,CAACa,mBAAmB,CAAC,MAAM,EAAEV,gBAAgB,CAAC,CAAC;;EAG9E;EACAA,gBAAgB,EAAE;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}