{"ast":null,"code":"import { decrypt as _decrypt, SdkError } from '@puzzlehq/sdk-core';\nimport { useInjectedRequest } from './utils/useRequest.js';\nimport { useIsConnected } from '../provider/PuzzleWalletProvider.js';\nexport const useDecrypt = ({\n  ciphertexts,\n  address,\n  network\n}) => {\n  const {\n    isConnected\n  } = useIsConnected();\n  const req = {\n    method: 'decrypt',\n    params: {\n      ciphertexts: ciphertexts,\n      address,\n      network\n    }\n  };\n  const {\n    request,\n    data,\n    error: _error,\n    loading\n  } = useInjectedRequest(req, async req => {\n    if (!isConnected) throw new Error(SdkError.NotConnected);\n    const response = await _decrypt({\n      ciphertexts,\n      address,\n      network\n    });\n    return response;\n  });\n  const error = typeof _error === 'string' ? _error : _error instanceof Error ? _error.message : undefined;\n  const response = data;\n  const decrypt = async requestOverride => {\n    return await request({\n      method: 'decrypt',\n      params: requestOverride ?? req\n    });\n  };\n  return {\n    decrypt,\n    plaintexts: response?.plaintexts,\n    loading,\n    error\n  };\n};","map":{"version":3,"names":["decrypt","_decrypt","SdkError","useInjectedRequest","useIsConnected","useDecrypt","ciphertexts","address","network","isConnected","req","method","params","request","data","error","_error","loading","Error","NotConnected","response","message","undefined","requestOverride","plaintexts"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@puzzlehq/sdk/dist/src/hooks/useDecrypt.js"],"sourcesContent":["import { decrypt as _decrypt, SdkError, } from '@puzzlehq/sdk-core';\nimport { useInjectedRequest } from './utils/useRequest.js';\nimport { useIsConnected } from '../provider/PuzzleWalletProvider.js';\nexport const useDecrypt = ({ ciphertexts, address, network, }) => {\n    const { isConnected } = useIsConnected();\n    const req = {\n        method: 'decrypt',\n        params: {\n            ciphertexts: ciphertexts,\n            address,\n            network,\n        },\n    };\n    const { request, data, error: _error, loading, } = useInjectedRequest(req, async (req) => {\n        if (!isConnected)\n            throw new Error(SdkError.NotConnected);\n        const response = await _decrypt({\n            ciphertexts,\n            address,\n            network\n        });\n        return response;\n    });\n    const error = typeof _error === 'string' ? _error : _error instanceof Error ? _error.message : undefined;\n    const response = data;\n    const decrypt = async (requestOverride) => {\n        return await request({\n            method: 'decrypt',\n            params: requestOverride ?? req,\n        });\n    };\n    return { decrypt, plaintexts: response?.plaintexts, loading, error };\n};\n"],"mappings":"AAAA,SAASA,OAAO,IAAIC,QAAQ,EAAEC,QAAQ,QAAS,oBAAoB;AACnE,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D,SAASC,cAAc,QAAQ,qCAAqC;AACpE,OAAO,MAAMC,UAAU,GAAGA,CAAC;EAAEC,WAAW;EAAEC,OAAO;EAAEC;AAAS,CAAC,KAAK;EAC9D,MAAM;IAAEC;EAAY,CAAC,GAAGL,cAAc,CAAC,CAAC;EACxC,MAAMM,GAAG,GAAG;IACRC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;MACJN,WAAW,EAAEA,WAAW;MACxBC,OAAO;MACPC;IACJ;EACJ,CAAC;EACD,MAAM;IAAEK,OAAO;IAAEC,IAAI;IAAEC,KAAK,EAAEC,MAAM;IAAEC;EAAS,CAAC,GAAGd,kBAAkB,CAACO,GAAG,EAAE,MAAOA,GAAG,IAAK;IACtF,IAAI,CAACD,WAAW,EACZ,MAAM,IAAIS,KAAK,CAAChB,QAAQ,CAACiB,YAAY,CAAC;IAC1C,MAAMC,QAAQ,GAAG,MAAMnB,QAAQ,CAAC;MAC5BK,WAAW;MACXC,OAAO;MACPC;IACJ,CAAC,CAAC;IACF,OAAOY,QAAQ;EACnB,CAAC,CAAC;EACF,MAAML,KAAK,GAAG,OAAOC,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,YAAYE,KAAK,GAAGF,MAAM,CAACK,OAAO,GAAGC,SAAS;EACxG,MAAMF,QAAQ,GAAGN,IAAI;EACrB,MAAMd,OAAO,GAAG,MAAOuB,eAAe,IAAK;IACvC,OAAO,MAAMV,OAAO,CAAC;MACjBF,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAEW,eAAe,IAAIb;IAC/B,CAAC,CAAC;EACN,CAAC;EACD,OAAO;IAAEV,OAAO;IAAEwB,UAAU,EAAEJ,QAAQ,EAAEI,UAAU;IAAEP,OAAO;IAAEF;EAAM,CAAC;AACxE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}