{"ast":null,"code":"import { connect as _connect, shortenAddress } from '@puzzlehq/sdk-core';\nimport { useAsyncAction } from './utils/_useAsyncAction.js';\nimport { useWalletStore } from '../store.js';\nimport { useIsConnected } from '../provider/connectionProvider.js';\nexport function useConnect(request) {\n  const {\n    isConnected,\n    setIsConnected\n  } = useIsConnected();\n  const {\n    data,\n    error,\n    loading,\n    setData,\n    setError,\n    setLoading\n  } = useAsyncAction();\n  const [setAccount] = useWalletStore(state => [state.setAccount]);\n  async function connect() {\n    try {\n      setLoading(true);\n      setError(undefined);\n      console.log('connect request', request);\n      const response = await _connect(request);\n      setData(response);\n      setAccount({\n        address: response.connection.address,\n        network: response.connection.network,\n        shortenedAddress: shortenAddress(response.connection.address)\n      });\n      setIsConnected(true);\n      return response;\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }\n  return {\n    data,\n    error,\n    loading,\n    isConnected,\n    connect\n  };\n}","map":{"version":3,"names":["connect","_connect","shortenAddress","useAsyncAction","useWalletStore","useIsConnected","useConnect","request","isConnected","setIsConnected","data","error","loading","setData","setError","setLoading","setAccount","state","undefined","console","log","response","address","connection","network","shortenedAddress","err"],"sources":["/Users/erdemrencbereli/Desktop/erdemrenc_ethdenver_aleo/aleo_dapp/node_modules/@puzzlehq/sdk/dist/src/hooks/useConnect.js"],"sourcesContent":["import { connect as _connect, shortenAddress } from '@puzzlehq/sdk-core';\nimport { useAsyncAction } from './utils/_useAsyncAction.js';\nimport { useWalletStore } from '../store.js';\nimport { useIsConnected } from '../provider/connectionProvider.js';\nexport function useConnect(request) {\n    const { isConnected, setIsConnected } = useIsConnected();\n    const { data, error, loading, setData, setError, setLoading } = useAsyncAction();\n    const [setAccount] = useWalletStore((state) => [state.setAccount]);\n    async function connect() {\n        try {\n            setLoading(true);\n            setError(undefined);\n            console.log('connect request', request);\n            const response = await _connect(request);\n            setData(response);\n            setAccount({\n                address: response.connection.address,\n                network: response.connection.network,\n                shortenedAddress: shortenAddress(response.connection.address),\n            });\n            setIsConnected(true);\n            return response;\n        }\n        catch (err) {\n            setError(err);\n            throw err;\n        }\n        finally {\n            setLoading(false);\n        }\n    }\n    return { data, error, loading, isConnected, connect };\n}\n"],"mappings":"AAAA,SAASA,OAAO,IAAIC,QAAQ,EAAEC,cAAc,QAAQ,oBAAoB;AACxE,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,cAAc,QAAQ,aAAa;AAC5C,SAASC,cAAc,QAAQ,mCAAmC;AAClE,OAAO,SAASC,UAAUA,CAACC,OAAO,EAAE;EAChC,MAAM;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACxD,MAAM;IAAEK,IAAI;IAAEC,KAAK;IAAEC,OAAO;IAAEC,OAAO;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAGZ,cAAc,CAAC,CAAC;EAChF,MAAM,CAACa,UAAU,CAAC,GAAGZ,cAAc,CAAEa,KAAK,IAAK,CAACA,KAAK,CAACD,UAAU,CAAC,CAAC;EAClE,eAAehB,OAAOA,CAAA,EAAG;IACrB,IAAI;MACAe,UAAU,CAAC,IAAI,CAAC;MAChBD,QAAQ,CAACI,SAAS,CAAC;MACnBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEb,OAAO,CAAC;MACvC,MAAMc,QAAQ,GAAG,MAAMpB,QAAQ,CAACM,OAAO,CAAC;MACxCM,OAAO,CAACQ,QAAQ,CAAC;MACjBL,UAAU,CAAC;QACPM,OAAO,EAAED,QAAQ,CAACE,UAAU,CAACD,OAAO;QACpCE,OAAO,EAAEH,QAAQ,CAACE,UAAU,CAACC,OAAO;QACpCC,gBAAgB,EAAEvB,cAAc,CAACmB,QAAQ,CAACE,UAAU,CAACD,OAAO;MAChE,CAAC,CAAC;MACFb,cAAc,CAAC,IAAI,CAAC;MACpB,OAAOY,QAAQ;IACnB,CAAC,CACD,OAAOK,GAAG,EAAE;MACRZ,QAAQ,CAACY,GAAG,CAAC;MACb,MAAMA,GAAG;IACb,CAAC,SACO;MACJX,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ;EACA,OAAO;IAAEL,IAAI;IAAEC,KAAK;IAAEC,OAAO;IAAEJ,WAAW;IAAER;EAAQ,CAAC;AACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}